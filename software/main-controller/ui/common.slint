global Palette := {
    property <color> text-color : white ;
    property <color> highlight-color : green; 
    property <color> dark-theme-grey : #121212;
    
}


export SelectButton := Rectangle {
    property <string> text;
    property <image> image;
    property <bool> reversed-order: false;
    property <length> font-size: 16px;
    property <color> text-color: Palette.text-color; 
    background: area.has-hover? @linear-gradient((reversed-order?-90deg: 90deg),  Palette.highlight-color, Palette.highlight-color.darker(0.2)) : Palette.dark-theme-grey ;
                               
    width: 170px;

      
        
    VerticalLayout {
        alignment: center;
                
        caption := HorizontalLayout { 
            padding: 10px;
            spacing: 10px;
            alignment: (reversed-order) ?  end : start;  

            // TODO there has to be a more elegant solution to 
            // reversing the orderer of the text and image!
            
            if !reversed-order : caption-image := Image {
                height: 30px;
                width: 30px;
                source: root.image;
                colorize: area.has-hover? black : Palette.highlight-color;
            }
            if !reversed-order : caption-text := Text {
                font-size: root.font-size;
                vertical-alignment: TextVerticalAlignment.center;
                text: root.text;
                color: area.has-hover ? black: root.text-color;
            }
            // Reversed order of elements if the selection button is reversed-order
            if reversed-order : reversed-caption-text := Text {
                font-size: root.font-size;
                vertical-alignment: TextVerticalAlignment.center;
                text: root.text;
                color: area.has-hover ? black: root.text-color;
            }
            if reversed-order : reversed-caption-image := Image {
                height: 30px;
                width: 30px;
                source: root.image;
                colorize: area.has-hover? black : Palette.highlight-color;
            }
        }
    }
    area := TouchArea {
        // clicked => {root.background = @linear-gradient(90deg, green, darkgreen);
        //             caption.color = }
    }
}

export Logo := Rectangle {
    background: Palette.dark-theme-grey;
    border-color: Palette.highlight-color;
    border-width: 2px;
    
    layout := VerticalLayout {
        content := Text {
            text: "Doble Audio";
            color: white;
            font-size: 14px;
            horizontal-alignment: TextHorizontalAlignment.center;
            vertical-alignment: TextVerticalAlignment.center;
        }
    }
    
}