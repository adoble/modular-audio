export global Palette := {
    property <color> text-color : white ;
    property <color> highlight-color : green; 
    property <color> dark-theme-grey : #121212;
    
}

// Ids of screens as properties so that we do not have the remember them.
export global Screens := {
    property <int> select-source : 0;
    property <int> more-select-source : 1;
    property <int> bluetooth : 2;
    property <int> airplay : 3;
    property <int> internet-radio : 4;
    property <int> dab-radio : 5;
    property <int> cd : 6;
    property <int> dvd : 7;
    property <int> settings : 8;
    property <int> toslink : 9;
    property <int> aux-in : 10;
    
}



export global ActiveScreen := {
    property <int> id;
}

export global ActiveSelectButton := {
    property <int> id ;
}


// Sselected sources
export global  Source  := {
    property <int> bluetooth: 1;
    property <int> airplay: 2;
    property <int> internet-radio: 3;
    property <int> dab-radio: 4;
    property <int> cd: 5;
    property <int> dvd: 6;
    property <int> toslink: 7;
    property <int> aux-in: 8;
    
    
    callback select-source(int);
}


export SelectButton := Rectangle {
    property <string> text;
    property <image> image;
    property <bool> reversed-order: false;
    property <length> font-size: 16px;
    property <color> text-color: Palette.text-color; 
    property <bool> highlighted : false;  
    property <int> next-screen-id: 0 ;

    property <int> source: -1 ;  // -1 means no source selected. Better to use Option, but they do not exist in slint as yet.

    background: highlighted ? @linear-gradient((reversed-order?-90deg: 90deg),  Palette.highlight-color, Palette.highlight-color.darker(0.2)) : Palette.dark-theme-grey ;
                               
    width: 170px;

      
        
    VerticalLayout {
        alignment: center;
                
        caption := HorizontalLayout { 
                      
            padding: 10px;
            spacing: 10px;
            alignment: (reversed-order) ?  end : start;  

            // TODO there has to be a more elegant solution to 
            // reversing the orderer of the text and image!
            
            if !reversed-order : caption-image := Image {
                height: 30px;
                width: 30px;
                source: root.image;
                //colorize: area.has-hover? black : Palette.highlight-color;
                colorize: highlighted ? black : Palette.highlight-color;
                animate  colorize{ duration: 100ms ; easing: ease; }
            }
            if !reversed-order : caption-text := Text {
                font-size: root.font-size;
                vertical-alignment: TextVerticalAlignment.center;
                text: root.text;
                //color: area.has-hover ? black: root.text-color;
                color: highlighted ? black: root.text-color;
                animate  color{ duration: 100ms ; easing: ease; }
            }
            // Reversed order of elements if the selection button is reversed-order
            if reversed-order : reversed-caption-text := Text {
                font-size: root.font-size;
                vertical-alignment: TextVerticalAlignment.center;
                text: root.text;
                //color: area.has-hover ? black: root.text-color;
                color: highlighted ? black: root.text-color;
                animate  color{ duration: 100ms ; easing: ease; }
            }
            if reversed-order : reversed-caption-image := Image {
                height: 30px;
                width: 30px;
                source: root.image;
                //colorize: area.has-hover? black : Palette.highlight-color;
                colorize: highlighted ? black : Palette.highlight-color;
                animate  colorize{ duration: 100ms ; easing: ease; } 
            }
        }
    }
    area := TouchArea {
        
        pointer-event(event) => { 
                    if (event.kind == PointerEventKind.down) {
                        root.highlighted = true;
                       
                    } else if (event.kind == PointerEventKind.up) {
                        root.highlighted = false;
                        // ActiveSelectButton.id = id;
                        ActiveScreen.id = next-screen-id;
                        Source.select-source(source);
                    }
         }
        
    }
}

export Logo := Rectangle {
    background: Palette.dark-theme-grey;
    border-color: Palette.highlight-color;
    border-width: 2px;
    
    layout := VerticalLayout {
        content := Text {
            text: "Doble Audio";
            color: white;
            font-size: 14px;
            horizontal-alignment: TextHorizontalAlignment.center;
            vertical-alignment: TextVerticalAlignment.center;
        }
    }
    
}